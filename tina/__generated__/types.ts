//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** References another document, used as a foreign key */
  Reference: any;
  JSON: any;
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String'];
  title?: Maybe<Scalars['String']>;
  basename: Scalars['String'];
  breadcrumbs: Array<Scalars['String']>;
  path: Scalars['String'];
  relativePath: Scalars['String'];
  extension: Scalars['String'];
  template: Scalars['String'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']>;
};

export type Folder = {
  __typename?: 'Folder';
  name: Scalars['String'];
  path: Scalars['String'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean'];
  hasNextPage: Scalars['Boolean'];
  startCursor: Scalars['String'];
  endCursor: Scalars['String'];
};

export type Node = {
  id: Scalars['ID'];
};

export type Document = {
  id: Scalars['ID'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  article: Article;
  articleConnection: ArticleConnection;
  header: Header;
  headerConnection: HeaderConnection;
  about: About;
  aboutConnection: AboutConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryArticleArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryArticleConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<ArticleFilter>;
};


export type QueryHeaderArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryHeaderConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<HeaderFilter>;
};


export type QueryAboutArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryAboutConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<AboutFilter>;
};

export type DocumentFilter = {
  article?: InputMaybe<ArticleFilter>;
  header?: InputMaybe<HeaderFilter>;
  about?: InputMaybe<AboutFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String'];
  slug: Scalars['String'];
  label?: Maybe<Scalars['String']>;
  path: Scalars['String'];
  format?: Maybe<Scalars['String']>;
  matches?: Maybe<Scalars['String']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<DocumentFilter>;
  folder?: InputMaybe<Scalars['String']>;
};

export type DocumentNode = Article | Header | About | Folder;

export type ArticleBlocksRichText = {
  __typename?: 'ArticleBlocksRichText';
  body: Scalars['JSON'];
};

export type ArticleBlocksMedia = {
  __typename?: 'ArticleBlocksMedia';
  file: Scalars['String'];
};

export type ArticleBlocksCode = {
  __typename?: 'ArticleBlocksCode';
  content?: Maybe<Scalars['String']>;
  lang?: Maybe<Scalars['String']>;
};

export type ArticleBlocks = ArticleBlocksRichText | ArticleBlocksMedia | ArticleBlocksCode;

export type Article = Node & Document & {
  __typename?: 'Article';
  title: Scalars['String'];
  description: Scalars['String'];
  publishedAt?: Maybe<Scalars['String']>;
  blocks?: Maybe<Array<Maybe<ArticleBlocks>>>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']>;
  eq?: InputMaybe<Scalars['String']>;
  exists?: InputMaybe<Scalars['Boolean']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type DatetimeFilter = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  eq?: InputMaybe<Scalars['String']>;
  exists?: InputMaybe<Scalars['Boolean']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type RichTextFilter = {
  startsWith?: InputMaybe<Scalars['String']>;
  eq?: InputMaybe<Scalars['String']>;
  exists?: InputMaybe<Scalars['Boolean']>;
};

export type ArticleBlocksRichTextFilter = {
  body?: InputMaybe<RichTextFilter>;
};

export type ImageFilter = {
  startsWith?: InputMaybe<Scalars['String']>;
  eq?: InputMaybe<Scalars['String']>;
  exists?: InputMaybe<Scalars['Boolean']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type ArticleBlocksMediaFilter = {
  file?: InputMaybe<ImageFilter>;
};

export type ArticleBlocksCodeFilter = {
  content?: InputMaybe<StringFilter>;
  lang?: InputMaybe<StringFilter>;
};

export type ArticleBlocksFilter = {
  richText?: InputMaybe<ArticleBlocksRichTextFilter>;
  media?: InputMaybe<ArticleBlocksMediaFilter>;
  code?: InputMaybe<ArticleBlocksCodeFilter>;
};

export type ArticleFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  publishedAt?: InputMaybe<DatetimeFilter>;
  blocks?: InputMaybe<ArticleBlocksFilter>;
};

export type ArticleConnectionEdges = {
  __typename?: 'ArticleConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Article>;
};

export type ArticleConnection = Connection & {
  __typename?: 'ArticleConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<ArticleConnectionEdges>>>;
};

export type Header = Node & Document & {
  __typename?: 'Header';
  title: Scalars['String'];
  subtitle: Scalars['String'];
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type HeaderFilter = {
  title?: InputMaybe<StringFilter>;
  subtitle?: InputMaybe<StringFilter>;
};

export type HeaderConnectionEdges = {
  __typename?: 'HeaderConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Header>;
};

export type HeaderConnection = Connection & {
  __typename?: 'HeaderConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<HeaderConnectionEdges>>>;
};

export type AboutBlocksRichText = {
  __typename?: 'AboutBlocksRichText';
  body: Scalars['JSON'];
};

export type AboutBlocksMedia = {
  __typename?: 'AboutBlocksMedia';
  file: Scalars['String'];
};

export type AboutBlocksCode = {
  __typename?: 'AboutBlocksCode';
  content?: Maybe<Scalars['String']>;
  lang?: Maybe<Scalars['String']>;
};

export type AboutBlocks = AboutBlocksRichText | AboutBlocksMedia | AboutBlocksCode;

export type About = Node & Document & {
  __typename?: 'About';
  blocks?: Maybe<Array<Maybe<AboutBlocks>>>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type AboutBlocksRichTextFilter = {
  body?: InputMaybe<RichTextFilter>;
};

export type AboutBlocksMediaFilter = {
  file?: InputMaybe<ImageFilter>;
};

export type AboutBlocksCodeFilter = {
  content?: InputMaybe<StringFilter>;
  lang?: InputMaybe<StringFilter>;
};

export type AboutBlocksFilter = {
  richText?: InputMaybe<AboutBlocksRichTextFilter>;
  media?: InputMaybe<AboutBlocksMediaFilter>;
  code?: InputMaybe<AboutBlocksCodeFilter>;
};

export type AboutFilter = {
  blocks?: InputMaybe<AboutBlocksFilter>;
};

export type AboutConnectionEdges = {
  __typename?: 'AboutConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<About>;
};

export type AboutConnection = Connection & {
  __typename?: 'AboutConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<AboutConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  updateArticle: Article;
  createArticle: Article;
  updateHeader: Header;
  createHeader: Header;
  updateAbout: About;
  createAbout: About;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String'];
  relativePath: Scalars['String'];
  template?: InputMaybe<Scalars['String']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
  params: DocumentUpdateMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
  params: DocumentMutation;
};


export type MutationUpdateArticleArgs = {
  relativePath: Scalars['String'];
  params: ArticleMutation;
};


export type MutationCreateArticleArgs = {
  relativePath: Scalars['String'];
  params: ArticleMutation;
};


export type MutationUpdateHeaderArgs = {
  relativePath: Scalars['String'];
  params: HeaderMutation;
};


export type MutationCreateHeaderArgs = {
  relativePath: Scalars['String'];
  params: HeaderMutation;
};


export type MutationUpdateAboutArgs = {
  relativePath: Scalars['String'];
  params: AboutMutation;
};


export type MutationCreateAboutArgs = {
  relativePath: Scalars['String'];
  params: AboutMutation;
};

export type DocumentUpdateMutation = {
  article?: InputMaybe<ArticleMutation>;
  header?: InputMaybe<HeaderMutation>;
  about?: InputMaybe<AboutMutation>;
  relativePath?: InputMaybe<Scalars['String']>;
};

export type DocumentMutation = {
  article?: InputMaybe<ArticleMutation>;
  header?: InputMaybe<HeaderMutation>;
  about?: InputMaybe<AboutMutation>;
};

export type ArticleBlocksRichTextMutation = {
  body?: InputMaybe<Scalars['JSON']>;
};

export type ArticleBlocksMediaMutation = {
  file?: InputMaybe<Scalars['String']>;
};

export type ArticleBlocksCodeMutation = {
  content?: InputMaybe<Scalars['String']>;
  lang?: InputMaybe<Scalars['String']>;
};

export type ArticleBlocksMutation = {
  richText?: InputMaybe<ArticleBlocksRichTextMutation>;
  media?: InputMaybe<ArticleBlocksMediaMutation>;
  code?: InputMaybe<ArticleBlocksCodeMutation>;
};

export type ArticleMutation = {
  title?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  publishedAt?: InputMaybe<Scalars['String']>;
  blocks?: InputMaybe<Array<InputMaybe<ArticleBlocksMutation>>>;
};

export type HeaderMutation = {
  title?: InputMaybe<Scalars['String']>;
  subtitle?: InputMaybe<Scalars['String']>;
};

export type AboutBlocksRichTextMutation = {
  body?: InputMaybe<Scalars['JSON']>;
};

export type AboutBlocksMediaMutation = {
  file?: InputMaybe<Scalars['String']>;
};

export type AboutBlocksCodeMutation = {
  content?: InputMaybe<Scalars['String']>;
  lang?: InputMaybe<Scalars['String']>;
};

export type AboutBlocksMutation = {
  richText?: InputMaybe<AboutBlocksRichTextMutation>;
  media?: InputMaybe<AboutBlocksMediaMutation>;
  code?: InputMaybe<AboutBlocksCodeMutation>;
};

export type AboutMutation = {
  blocks?: InputMaybe<Array<InputMaybe<AboutBlocksMutation>>>;
};

export type ArticlePartsFragment = { __typename?: 'Article', title: string, description: string, publishedAt?: string | null, blocks?: Array<{ __typename: 'ArticleBlocksRichText', body: any } | { __typename: 'ArticleBlocksMedia', file: string } | { __typename: 'ArticleBlocksCode', content?: string | null, lang?: string | null } | null> | null };

export type HeaderPartsFragment = { __typename?: 'Header', title: string, subtitle: string };

export type AboutPartsFragment = { __typename?: 'About', blocks?: Array<{ __typename: 'AboutBlocksRichText', body: any } | { __typename: 'AboutBlocksMedia', file: string } | { __typename: 'AboutBlocksCode', content?: string | null, lang?: string | null } | null> | null };

export type ArticleQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type ArticleQuery = { __typename?: 'Query', article: { __typename?: 'Article', id: string, title: string, description: string, publishedAt?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, blocks?: Array<{ __typename: 'ArticleBlocksRichText', body: any } | { __typename: 'ArticleBlocksMedia', file: string } | { __typename: 'ArticleBlocksCode', content?: string | null, lang?: string | null } | null> | null } };

export type ArticleConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<ArticleFilter>;
}>;


export type ArticleConnectionQuery = { __typename?: 'Query', articleConnection: { __typename?: 'ArticleConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'ArticleConnectionEdges', cursor: string, node?: { __typename?: 'Article', id: string, title: string, description: string, publishedAt?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, blocks?: Array<{ __typename: 'ArticleBlocksRichText', body: any } | { __typename: 'ArticleBlocksMedia', file: string } | { __typename: 'ArticleBlocksCode', content?: string | null, lang?: string | null } | null> | null } | null } | null> | null } };

export type HeaderQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type HeaderQuery = { __typename?: 'Query', header: { __typename?: 'Header', id: string, title: string, subtitle: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type HeaderConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<HeaderFilter>;
}>;


export type HeaderConnectionQuery = { __typename?: 'Query', headerConnection: { __typename?: 'HeaderConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'HeaderConnectionEdges', cursor: string, node?: { __typename?: 'Header', id: string, title: string, subtitle: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type AboutQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type AboutQuery = { __typename?: 'Query', about: { __typename?: 'About', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, blocks?: Array<{ __typename: 'AboutBlocksRichText', body: any } | { __typename: 'AboutBlocksMedia', file: string } | { __typename: 'AboutBlocksCode', content?: string | null, lang?: string | null } | null> | null } };

export type AboutConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<AboutFilter>;
}>;


export type AboutConnectionQuery = { __typename?: 'Query', aboutConnection: { __typename?: 'AboutConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'AboutConnectionEdges', cursor: string, node?: { __typename?: 'About', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, blocks?: Array<{ __typename: 'AboutBlocksRichText', body: any } | { __typename: 'AboutBlocksMedia', file: string } | { __typename: 'AboutBlocksCode', content?: string | null, lang?: string | null } | null> | null } | null } | null> | null } };

export const ArticlePartsFragmentDoc = gql`
    fragment ArticleParts on Article {
  title
  description
  publishedAt
  blocks {
    __typename
    ... on ArticleBlocksRichText {
      body
    }
    ... on ArticleBlocksMedia {
      file
    }
    ... on ArticleBlocksCode {
      content
      lang
    }
  }
}
    `;
export const HeaderPartsFragmentDoc = gql`
    fragment HeaderParts on Header {
  title
  subtitle
}
    `;
export const AboutPartsFragmentDoc = gql`
    fragment AboutParts on About {
  blocks {
    __typename
    ... on AboutBlocksRichText {
      body
    }
    ... on AboutBlocksMedia {
      file
    }
    ... on AboutBlocksCode {
      content
      lang
    }
  }
}
    `;
export const ArticleDocument = gql`
    query article($relativePath: String!) {
  article(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...ArticleParts
  }
}
    ${ArticlePartsFragmentDoc}`;
export const ArticleConnectionDocument = gql`
    query articleConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: ArticleFilter) {
  articleConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...ArticleParts
      }
    }
  }
}
    ${ArticlePartsFragmentDoc}`;
export const HeaderDocument = gql`
    query header($relativePath: String!) {
  header(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...HeaderParts
  }
}
    ${HeaderPartsFragmentDoc}`;
export const HeaderConnectionDocument = gql`
    query headerConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: HeaderFilter) {
  headerConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...HeaderParts
      }
    }
  }
}
    ${HeaderPartsFragmentDoc}`;
export const AboutDocument = gql`
    query about($relativePath: String!) {
  about(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...AboutParts
  }
}
    ${AboutPartsFragmentDoc}`;
export const AboutConnectionDocument = gql`
    query aboutConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: AboutFilter) {
  aboutConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...AboutParts
      }
    }
  }
}
    ${AboutPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      article(variables: ArticleQueryVariables, options?: C): Promise<{data: ArticleQuery, variables: ArticleQueryVariables, query: string}> {
        return requester<{data: ArticleQuery, variables: ArticleQueryVariables, query: string}, ArticleQueryVariables>(ArticleDocument, variables, options);
      },
    articleConnection(variables?: ArticleConnectionQueryVariables, options?: C): Promise<{data: ArticleConnectionQuery, variables: ArticleConnectionQueryVariables, query: string}> {
        return requester<{data: ArticleConnectionQuery, variables: ArticleConnectionQueryVariables, query: string}, ArticleConnectionQueryVariables>(ArticleConnectionDocument, variables, options);
      },
    header(variables: HeaderQueryVariables, options?: C): Promise<{data: HeaderQuery, variables: HeaderQueryVariables, query: string}> {
        return requester<{data: HeaderQuery, variables: HeaderQueryVariables, query: string}, HeaderQueryVariables>(HeaderDocument, variables, options);
      },
    headerConnection(variables?: HeaderConnectionQueryVariables, options?: C): Promise<{data: HeaderConnectionQuery, variables: HeaderConnectionQueryVariables, query: string}> {
        return requester<{data: HeaderConnectionQuery, variables: HeaderConnectionQueryVariables, query: string}, HeaderConnectionQueryVariables>(HeaderConnectionDocument, variables, options);
      },
    about(variables: AboutQueryVariables, options?: C): Promise<{data: AboutQuery, variables: AboutQueryVariables, query: string}> {
        return requester<{data: AboutQuery, variables: AboutQueryVariables, query: string}, AboutQueryVariables>(AboutDocument, variables, options);
      },
    aboutConnection(variables?: AboutConnectionQueryVariables, options?: C): Promise<{data: AboutConnectionQuery, variables: AboutConnectionQueryVariables, query: string}> {
        return requester<{data: AboutConnectionQuery, variables: AboutConnectionQueryVariables, query: string}, AboutConnectionQueryVariables>(AboutConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (client: TinaClient) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: any,
    client
  ) => Promise<any> = async (doc, vars, _options) => {
    const data = await client.request({
      query: doc,
      variables: vars,
    });

    return { data: data?.data, query: doc, variables: vars || {} };
  };

  return requester;
};

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(createClient({ url: "http://localhost:4001/graphql", queries }))
  );

export const queries = (client: TinaClient) => {
  const requester = generateRequester(client);
  return getSdk(requester);
};

  