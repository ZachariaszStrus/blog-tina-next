# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  article(relativePath: String): Article!
  articleConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ArticleFilter): ArticleConnection!
  header(relativePath: String): Header!
  headerConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: HeaderFilter): HeaderConnection!
  about(relativePath: String): About!
  aboutConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: AboutFilter): AboutConnection!
}

input DocumentFilter {
  article: ArticleFilter
  header: HeaderFilter
  about: AboutFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Article | Header | About | Folder

type ArticleBlocksRichText {
  body: JSON!
}

type ArticleBlocksMedia {
  file: String!
}

type ArticleBlocksCode {
  content: String
  lang: String
}

union ArticleBlocks = ArticleBlocksRichText | ArticleBlocksMedia | ArticleBlocksCode

type Article implements Node & Document {
  title: String!
  description: String!
  publishedAt: String
  blocks: [ArticleBlocks]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input ArticleBlocksRichTextFilter {
  body: RichTextFilter
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input ArticleBlocksMediaFilter {
  file: ImageFilter
}

input ArticleBlocksCodeFilter {
  content: StringFilter
  lang: StringFilter
}

input ArticleBlocksFilter {
  richText: ArticleBlocksRichTextFilter
  media: ArticleBlocksMediaFilter
  code: ArticleBlocksCodeFilter
}

input ArticleFilter {
  title: StringFilter
  description: StringFilter
  publishedAt: DatetimeFilter
  blocks: ArticleBlocksFilter
}

type ArticleConnectionEdges {
  cursor: String!
  node: Article
}

type ArticleConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ArticleConnectionEdges]
}

type Header implements Node & Document {
  title: String!
  subtitle: String!
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input HeaderFilter {
  title: StringFilter
  subtitle: StringFilter
}

type HeaderConnectionEdges {
  cursor: String!
  node: Header
}

type HeaderConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [HeaderConnectionEdges]
}

type AboutBlocksRichText {
  body: JSON!
}

type AboutBlocksMedia {
  file: String!
}

type AboutBlocksCode {
  content: String
  lang: String
}

union AboutBlocks = AboutBlocksRichText | AboutBlocksMedia | AboutBlocksCode

type About implements Node & Document {
  blocks: [AboutBlocks]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input AboutBlocksRichTextFilter {
  body: RichTextFilter
}

input AboutBlocksMediaFilter {
  file: ImageFilter
}

input AboutBlocksCodeFilter {
  content: StringFilter
  lang: StringFilter
}

input AboutBlocksFilter {
  richText: AboutBlocksRichTextFilter
  media: AboutBlocksMediaFilter
  code: AboutBlocksCodeFilter
}

input AboutFilter {
  blocks: AboutBlocksFilter
}

type AboutConnectionEdges {
  cursor: String!
  node: About
}

type AboutConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [AboutConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateArticle(relativePath: String!, params: ArticleMutation!): Article!
  createArticle(relativePath: String!, params: ArticleMutation!): Article!
  updateHeader(relativePath: String!, params: HeaderMutation!): Header!
  createHeader(relativePath: String!, params: HeaderMutation!): Header!
  updateAbout(relativePath: String!, params: AboutMutation!): About!
  createAbout(relativePath: String!, params: AboutMutation!): About!
}

input DocumentUpdateMutation {
  article: ArticleMutation
  header: HeaderMutation
  about: AboutMutation
  relativePath: String
}

input DocumentMutation {
  article: ArticleMutation
  header: HeaderMutation
  about: AboutMutation
}

input ArticleBlocksRichTextMutation {
  body: JSON
}

input ArticleBlocksMediaMutation {
  file: String
}

input ArticleBlocksCodeMutation {
  content: String
  lang: String
}

input ArticleBlocksMutation {
  richText: ArticleBlocksRichTextMutation
  media: ArticleBlocksMediaMutation
  code: ArticleBlocksCodeMutation
}

input ArticleMutation {
  title: String
  description: String
  publishedAt: String
  blocks: [ArticleBlocksMutation]
}

input HeaderMutation {
  title: String
  subtitle: String
}

input AboutBlocksRichTextMutation {
  body: JSON
}

input AboutBlocksMediaMutation {
  file: String
}

input AboutBlocksCodeMutation {
  content: String
  lang: String
}

input AboutBlocksMutation {
  richText: AboutBlocksRichTextMutation
  media: AboutBlocksMediaMutation
  code: AboutBlocksCodeMutation
}

input AboutMutation {
  blocks: [AboutBlocksMutation]
}

schema {
  query: Query
  mutation: Mutation
}
